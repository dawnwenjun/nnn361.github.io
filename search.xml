<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HelloVue</title>
    <url>/2020/04/05/HelloVue/</url>
    <content><![CDATA[<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><img title="七牛云" alt="七牛云" src="http://vinceblog.qiniudn.com/static/images/7.jpg?imageView2/2/w/450">

<p>正解：安装最新版的：</p>
<p>卸载2.x版本的vue-cli ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm uninstall -g vue-cli 或 yarn global remove vue-cli</span><br></pre></td></tr></table></figure>

<p>安装3.x版本的@vue/cli ：</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g @vue&#x2F;cli 或 yarn global add @vue&#x2F;cli</span><br></pre></td></tr></table></figure>



<p>创建一个vue项目</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue create 项目名</span><br></pre></td></tr></table></figure>

<p>第三方组件应用</p>
<p>​        element集成 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue add element</span><br></pre></td></tr></table></figure>



<p>Components组件取名习惯</p>
<p>1.大写名字  例如 </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">Inputs.vue   InputsList.vue</span><br></pre></td></tr></table></figure>



<p>2.组件中写法    例如    </p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;inputs&gt;&lt;&#x2F;inputs&gt;   &lt;inputs-list&gt;&lt;&#x2F;inputs-list&gt;</span><br></pre></td></tr></table></figure>





<p>知识点</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1.vue-router基础配置</span><br><span class="line">2.路由传参</span><br><span class="line">3.子路由</span><br><span class="line">4.路由重定向</span><br><span class="line">5.路由守卫</span><br><span class="line">6.vue数据流</span><br><span class="line">7.Store</span><br><span class="line">8.state</span><br><span class="line">9.mutation</span><br><span class="line">10.action</span><br></pre></td></tr></table></figure>

<p>安装vue-router</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vue add router	|| npm install vue-router -S</span><br></pre></td></tr></table></figure>



<h3 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">1. v-model</span><br><span class="line"></span><br><span class="line">2. @click&#x3D;&quot;函数名&quot;</span><br><span class="line"></span><br><span class="line">3. v-for&#x3D;&quot;（item，index） in List&quot; :key&#x3D;&quot;item.id&quot;</span><br><span class="line">	&#123;&#123;item.name&#125;&#125;</span><br></pre></td></tr></table></figure>

<p>   4.父子组件</p>
<p><strong>父组件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">	&lt;cart1 </span><br><span class="line">		:courseItem&#x3D;&quot;courseItem&quot; </span><br><span class="line">		@removeItem&#x3D;&quot;remove&quot; &#x2F;&gt;		</span><br><span class="line"></span><br><span class="line">子组件</span><br><span class="line"> components:&#123;</span><br><span class="line">    Cart1</span><br><span class="line">  &#125;,</span><br><span class="line">  </span><br><span class="line">  remove(index)&#123;</span><br><span class="line">          this.courseItem.splice(index,1);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure>

<p><strong>子组件</strong></p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">props: [&quot;courseItem&quot;],</span><br><span class="line"> </span><br><span class="line">this.$emit(&quot;removeItem&quot;,index);</span><br></pre></td></tr></table></figure>

<p>5.计算属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">	isActiveCourse()&#123;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>6.过滤器</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">filter</span><br><span class="line"></span><br><span class="line">this.courseItem.filter(item&#x3D;&gt;item.isActive).length;</span><br></pre></td></tr></table></figure>

<p>7.遍历</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.courseItem.forEach(item&#x3D;&gt;&#123;</span><br><span class="line">              if(item.isActive)</span><br><span class="line">              &#123;</span><br><span class="line">                  num+&#x3D;item.price*item.number;</span><br><span class="line">              &#125;</span><br><span class="line">          &#125;)</span><br></pre></td></tr></table></figure>

<p>8.运行</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm run serve</span><br></pre></td></tr></table></figure>





<h3 id="vue-router"><a href="#vue-router" class="headerlink" title="vue-router"></a>vue-router</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">导航													</span><br><span class="line">history模式</span><br><span class="line">重定向</span><br><span class="line">路由命名</span><br><span class="line">动态路由</span><br><span class="line">参数属性传递</span><br><span class="line">嵌套路由</span><br><span class="line">命名视图</span><br><span class="line">导航守卫</span><br><span class="line">异步组件</span><br></pre></td></tr></table></figure>



<h4 id="history模式"><a href="#history模式" class="headerlink" title="history模式"></a>history模式</h4><p>默认是hash模式  url使用#后面定位   对seo不利</p>
<p>设置history   可以使用普通的url模式</p>
<h4 id="导航"><a href="#导航" class="headerlink" title="导航"></a>导航</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;home&quot;&gt;home&lt;&#x2F;router-link&gt;|</span><br><span class="line">&lt;router-link to&#x3D;&quot;&#x2F;about&quot;&gt;about&lt;&#x2F;router-link&gt;</span><br><span class="line">&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br></pre></td></tr></table></figure>

<h4 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#x2F;&#x2F;根目录 重定向</span><br><span class="line">       &#123;</span><br><span class="line">           path:&#39;&#x2F;&#39;,</span><br><span class="line">           redirect:&#39;&#x2F;home&#39;</span><br><span class="line">       &#125;,</span><br></pre></td></tr></table></figure>

<h4 id="路由命名"><a href="#路由命名" class="headerlink" title="路由命名"></a>路由命名</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	path:&#39;&#x2F;a&#39;,</span><br><span class="line">	name:&#39;pageA&#39;,</span><br><span class="line">	component:pageA</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;router-link :to&#x3D;&quot;&#123;name:&#39;home&#39;,params:&#123;userId:123&#125;&#125;&quot;&gt;home&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>

<h4 id="动态路由"><a href="#动态路由" class="headerlink" title="动态路由"></a>动态路由</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">		&#123;</span><br><span class="line">            path:&#39;&#x2F;about&#x2F;:id&#39;,</span><br><span class="line">            name:&#39;about&#39;,</span><br><span class="line">            component:About</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">this.$route.params.id</span><br></pre></td></tr></table></figure>

<p><img src="/.xyz//1.jpg" alt="1580648022190"></p>
<h4 id="参数属性传递"><a href="#参数属性传递" class="headerlink" title="参数属性传递"></a>参数属性传递</h4><p>设置props属性  获取路由的变量 就和普通的属性传递没什么区别</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">     path:&#39;&#x2F;about&#x2F;:id&#39;,</span><br><span class="line">     name:&#39;about&#39;,</span><br><span class="line">     props:true,</span><br><span class="line">     component:About</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&lt;div&gt;&#123;&#123;id&#125;&#125;&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">export default&#123;</span><br><span class="line">	props:[&#39;id&#39;]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h4><p>子路由  比如页面内部的导航复用</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">	path:&#39;&#x2F;dada&#39;,</span><br><span class="line">	component:Dadad,</span><br><span class="line">	children:[</span><br><span class="line">		&#123;path:&#39;page1&#39;,component:Page1&#125;,</span><br><span class="line">		&#123;path:&#39;page2&#39;,component:Page2&#125;,</span><br><span class="line">		&#123;path:&#39;page3&#x2F;:id&#39;,props:true,component:Page3&#125;</span><br><span class="line">	]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="命名视图"><a href="#命名视图" class="headerlink" title="命名视图"></a>命名视图</h4><p>一个组件内部有多个router-view怎么来分配组件</p>
<p>比如  三栏布局    顶部栏点击按钮  左侧栏的菜单变化</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;div&gt;</span><br><span class="line">	&lt;router-view&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">	&lt;router-view name&#x3D;&quot;a&quot;&gt;&lt;&#x2F;router-view&gt;</span><br><span class="line">&lt;&#x2F;div&gt;</span><br><span class="line"></span><br><span class="line">routes:[</span><br><span class="line">	&#123;</span><br><span class="line">		path:&#39;&#x2F;home&#39;,</span><br><span class="line">		compontents:&#123;</span><br><span class="line">			defalut:Home,</span><br><span class="line">			a:List</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure>

<h4 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h4><p>路由的生命周期</p>
<h5 id="全局路由"><a href="#全局路由" class="headerlink" title="全局路由"></a>全局路由</h5><p>暂不用</p>
<h3 id="vuex"><a href="#vuex" class="headerlink" title="vuex"></a>vuex</h3><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install vuex --save</span><br><span class="line">vue add vuex</span><br></pre></td></tr></table></figure>

<p>以下是一个表示“单向数据流”理念的简单示意：</p>
<ul>
<li><strong>state</strong>，驱动应用的数据源；</li>
<li><strong>view</strong>，以声明方式将 <strong>state</strong> 映射到视图；</li>
<li><strong>actions</strong>，响应在 <strong>view</strong> 上的用户输入导致的状态变化。</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">vuex数据管理</span><br><span class="line">状态管理模式</span><br><span class="line">store</span><br><span class="line">Mutation</span><br><span class="line">getters</span><br><span class="line">Action</span><br><span class="line">mapState</span><br><span class="line">mapActions</span><br><span class="line">mapMutions</span><br></pre></td></tr></table></figure>

<h4 id="getters"><a href="#getters" class="headerlink" title="getters"></a>getters</h4><p>有时候需要从store中的state中派生一些状态  可以理解为vuex中数据的computed功能</p>
<p><strong>使用</strong></p>
<p>store.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">getters:&#123;</span><br><span class="line">	money:state&#x3D;&gt; return &#96;￥$&#123;state.count*1000&#125;&#96;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#x2F;&#x2F;tip</span><br><span class="line">&#96;$&#123;state.count*1000&#125;&#96;</span><br></pre></td></tr></table></figure>

<p>page1.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">computed:&#123;</span><br><span class="line">	money()&#123;</span><br><span class="line">		return this.$store.getters.money</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h4><p>//注意  和Actions区分开</p>
<p>Mutation必须是同步的</p>
<p>Action是异步的Mutation</p>
<p>store.js</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">actions:&#123;</span><br><span class="line">	incrementAsync(&#123;commit&#125;)&#123;</span><br><span class="line">		setTimeout(()&#x3D;&gt;&#123;</span><br><span class="line">			commit(&#39;increment&#39;)</span><br><span class="line">		&#125;,1000)</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>page1.vue</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.$store.dispatch(&#39;incrementAsync&#39;)</span><br></pre></td></tr></table></figure>

<p>传递参数形式</p>
<p>暂时不提</p>
<h4 id="mapState"><a href="#mapState" class="headerlink" title="mapState"></a>mapState</h4><p>当一个组件需要获取多个状态的时候</p>
<p>将这些状态都声明为计算属性会有些重复和冗余</p>
<p>可使用mapState辅助函数帮助我们计算生成计算属性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">...mapState(&#123;</span><br><span class="line">	count:state&#x3D;&gt;state.count</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h4 id="mapActions-映射"><a href="#mapActions-映射" class="headerlink" title="mapActions  映射"></a>mapActions  映射</h4><p>方便使用action</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line"> &#x2F;&#x2F;第一步</span><br><span class="line">import &#123;mapActions&#125; from &#39;vuex&#39;</span><br></pre></td></tr></table></figure>

<p>​    //第二步</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods:&#123;</span><br><span class="line">	...mapActions([&#39;incrementAsync&#39;]),</span><br><span class="line">	...mapActions(&#123;add:&#39;increment&#39;&#125;)</span><br><span class="line">	&#x2F;&#x2F;将this.add()映射为 this.$store.dispath(&#39;increment&#39;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在组件中分发action</p>
<p>this.$store.dispatch可以变为</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">this.incrementAsync(&#123;</span><br><span class="line">	amount:10</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">methods:mapActions(</span><br><span class="line">[&#39;&#39;,&#39;&#39;,&#39;&#39;]</span><br><span class="line">)</span><br><span class="line">&#x2F;&#x2F;pageA.vue中定义的方法名必须和mapActions数组中方法名一致</span><br></pre></td></tr></table></figure>





<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>-S</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">即--save（保存）</span><br><span class="line">包名会被注册在package.json的dependencies里面，在生产环境下这个包的依赖依然存在</span><br></pre></td></tr></table></figure>

<p>-D</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">即--dev（生产）  – --save-dev</span><br><span class="line">包名会被注册在package.json的devDependencies里面，仅在开发环境下存在的包用-D，如babel，sass-loader这些解析器</span><br></pre></td></tr></table></figure>

<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm i module_name  -g  全局安装</span><br></pre></td></tr></table></figure>

<p>全局安装与本地安装</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install express          # 本地安装</span><br><span class="line">npm install express -g   # 全局安装</span><br></pre></td></tr></table></figure>

<p>cnpm</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g cnpm --registry&#x3D;https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>

<p>es6   … 作用</p>
<p><strong>对象中的扩展运算符(…)用于取出参数对象中的所有可遍历属性，拷贝到当前对象之中</strong></p>
<h4 id="从express4-0版本之后，express便将命令工具分出来了，需要安装一个命令工具"><a href="#从express4-0版本之后，express便将命令工具分出来了，需要安装一个命令工具" class="headerlink" title="从express4.0版本之后，express便将命令工具分出来了，需要安装一个命令工具"></a>从express4.0版本之后，express便将命令工具分出来了，需要安装一个命令工具</h4><figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">npm install -g express-generator</span><br></pre></td></tr></table></figure>

<h4 id="输入express-version"><a href="#输入express-version" class="headerlink" title="输入express --version"></a>输入<code>express --version</code></h4><p>4.16.1</p>
]]></content>
      <tags>
        <tag>Typora</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
</search>
